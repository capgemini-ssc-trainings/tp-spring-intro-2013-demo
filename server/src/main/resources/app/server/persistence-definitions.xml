<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


<!-- 	<import resource="properties.xml" /> -->


	<!-- Configure the data source -->
	<bean id="dataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<!-- Initialize the data source using the sql file -->
	<jdbc:initialize-database data-source="dataSource"
		ignore-failures="ALL">
		<jdbc:script location="classpath:app/server/sql/db-test-data.sql" />
	</jdbc:initialize-database>


	<!-- //[ Aufgabe 4.2 Add hibernate session factory (AnnotationSessionFactoryBean). Load the hibernate properties from app/server/dao/hsqldb-hibernate.properties in in the default profile at the end of this file -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource" p:annotatedClasses-ref="annotatedClasses"
		p:annotatedPackages="app.shared.model" p:hibernateProperties-ref="hibernateProperties"
		p:eventListeners-ref="eventListeners" />

	<util:list id="annotatedClasses">
		<value>app.shared.model.Book</value>
		<value>app.shared.model.Reader</value>
	</util:list>

	<bean id="validationFactory" class="javax.validation.Validation"
		factory-method="buildDefaultValidatorFactory" />

	<bean id="beanValidationEventListener"
		class="org.hibernate.cfg.beanvalidation.BeanValidationEventListener">
		<constructor-arg index="0" ref="validationFactory" />
		<constructor-arg index="1">
			<props />
		</constructor-arg>
	</bean>

	<util:map id="eventListeners">
		<entry key="pre-insert" value-ref="beanValidationEventListener" />
		<entry key="pre-update" value-ref="beanValidationEventListener" />
	</util:map>
	<!-- //] Aufgabe 4.2 -->



	<!-- //[ Aufgabe 4.3 Add HibernateTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory">
	</bean>
	<!-- //] Aufgabe 4.3 -->


	<!-- //[ Aufgabe 4.4 Activate annotation based transaction handling -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- //] Aufgabe 4.4 -->

	<!-- Activate declarative transaction handling. In this case you can ommit 
		steps 4.4, 4.5, 4.6 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="*" read-only="true" propagation="REQUIRED" 
		/> </tx:attributes> </tx:advice> <aop:config> <aop:pointcut id="bookServiceMethods" 
		expression="execution(* app.shared.service.IBookService.*(..))" /> <aop:advisor 
		advice-ref="txAdvice" pointcut-ref="bookServiceMethods" /> </aop:config> -->


	<!-- applies persistence exception translation to any bean that carries 
		the Repository annotation -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<beans profile="default">
		<!-- Load jdbc properties from the configuration file -->
		<context:property-placeholder
			location="classpath:app/server/dao/hsqldb-jdbc.properties" />

		<!-- //[ Aufgabe 4.2 Load the hibernate properties from app/server/dao/hsqldb-hibernate.properties -->
		<util:properties id="hibernateProperties"
			location="classpath:app/server/dao/hsqldb-hibernate.properties" />
		<!-- //] Aufgabe 4.2 -->
	</beans>

	<beans profile="mysql">
		<!-- Load jdbc properties from the configuration file -->
		<context:property-placeholder
			location="classpath:app/server/dao/mysql-jdbc.properties" />

		<!-- //[ Aufgabe 4.2 Load the hibernate properties from app/server/dao/mysql-hibernate.properties -->
		<util:properties id="hibernateProperties"
			location="classpath:app/server/dao/mysql-hibernate.properties" />
		<!-- //] Aufgabe 4.2 -->
	</beans>

</beans>
